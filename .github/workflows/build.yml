name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            extension: .exe
            artifact_name: clicker-windows-x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            extension: ""
            artifact_name: clicker-linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            extension: ""
            artifact_name: clicker-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            extension: ""
            artifact_name: clicker-macos-arm64

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxext-dev libxi-dev libxtst-dev

    - name: Cache cargo-bundle
      if: matrix.os == 'macos-latest'
      uses: actions/cache@v4
      id: cache-cargo-bundle
      with:
        path: ~/.cargo/bin/cargo-bundle
        key: ${{ runner.os }}-cargo-bundle-v1
        restore-keys: |
          ${{ runner.os }}-cargo-bundle-

    - name: Install cargo-bundle (macOS only)
      if: matrix.os == 'macos-latest' && steps.cache-cargo-bundle.outputs.cache-hit != 'true'
      run: cargo install cargo-bundle

    - name: Cache Homebrew packages
      if: matrix.os == 'macos-latest'
      uses: actions/cache@v4
      id: cache-brew
      with:
        path: |
          /usr/local/Cellar/graphicsmagick
          /usr/local/Cellar/imagemagick
          /opt/homebrew/Cellar/graphicsmagick
          /opt/homebrew/Cellar/imagemagick
        key: ${{ runner.os }}-brew-gm-im-v1
        restore-keys: |
          ${{ runner.os }}-brew-gm-im-

    - name: Cache npm global packages
      if: matrix.os == 'macos-latest'
      uses: actions/cache@v4
      id: cache-npm-global
      with:
        path: ~/.npm-global
        key: ${{ runner.os }}-npm-global-create-dmg-v1
        restore-keys: |
          ${{ runner.os }}-npm-global-

    - name: Setup npm global cache path
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p ~/.npm-global
        npm config set prefix '~/.npm-global'
        echo "$HOME/.npm-global/bin" >> $GITHUB_PATH

    - name: Install Homebrew dependencies (macOS only)
      if: matrix.os == 'macos-latest' && steps.cache-brew.outputs.cache-hit != 'true'
      run: brew install graphicsmagick imagemagick

    - name: Install create-dmg (macOS only)
      if: matrix.os == 'macos-latest' && steps.cache-npm-global.outputs.cache-hit != 'true'
      run: npm install --global create-dmg

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create macOS app bundle and DMG
      if: matrix.os == 'macos-latest'
      run: |
        cargo bundle --release --target ${{ matrix.target }}
        create-dmg target/${{ matrix.target }}/release/bundle/osx/Clicker.app --overwrite --identity="-" || true
        # Rename the auto-generated DMG to match our artifact naming convention
        mv "Clicker "*.dmg "${{ matrix.artifact_name }}.dmg"

    - name: Prepare artifacts (Windows/Linux)
      if: matrix.os != 'macos-latest'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/clicker${{ matrix.extension }} artifacts/clicker${{ matrix.extension }}

    - name: Prepare artifacts (macOS binary)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/clicker artifacts/clicker

    - name: Upload binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-binary
        path: artifacts/
        retention-days: 30

    - name: Upload macOS app bundle
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-app-bundle
        path: ${{ matrix.artifact_name }}.dmg
        retention-days: 30

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxext-dev libxi-dev libxtst-dev

    - name: Run tests
      run: cargo test --verbose

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check

  publish-release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/v') && needs.build.result == 'success' && needs.test.result == 'success'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Publish Windows x64 binary
      uses: svenstaro/upload-release-action@v2
      with:
        file: clicker-windows-x64-binary/clicker.exe
        asset_name: clicker-windows-x64.exe
        tag: ${{ github.ref }}
        overwrite: true

    - name: Publish Linux x64 binary
      uses: svenstaro/upload-release-action@v2
      with:
        file: clicker-linux-x64-binary/clicker
        asset_name: clicker-linux-x64
        tag: ${{ github.ref }}
        overwrite: true

    - name: Publish macOS Intel binary
      uses: svenstaro/upload-release-action@v2
      with:
        file: clicker-macos-x64-binary/clicker
        asset_name: clicker-macos-x64
        tag: ${{ github.ref }}
        overwrite: true

    - name: Publish macOS ARM binary
      uses: svenstaro/upload-release-action@v2
      with:
        file: clicker-macos-arm64-binary/clicker
        asset_name: clicker-macos-arm64
        tag: ${{ github.ref }}
        overwrite: true

    - name: Publish macOS Intel DMG
      uses: svenstaro/upload-release-action@v2
      with:
        file: clicker-macos-x64-app-bundle/clicker-macos-x64.dmg
        asset_name: clicker-macos-x64.dmg
        tag: ${{ github.ref }}
        overwrite: true

    - name: Publish macOS ARM DMG
      uses: svenstaro/upload-release-action@v2
      with:
        file: clicker-macos-arm64-app-bundle/clicker-macos-arm64.dmg
        asset_name: clicker-macos-arm64.dmg
        tag: ${{ github.ref }}
        overwrite: true

  create-release-summary:
    name: Create Build Summary
    runs-on: ubuntu-latest
    needs: [build, test]
    if: always()
    steps:
    - name: Create build summary
      run: |
        echo "# Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Build Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Builds**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Available Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "The following build artifacts are available:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Binaries" >> $GITHUB_STEP_SUMMARY
        echo "- \`clicker-windows-x64-binary\` - Windows executable" >> $GITHUB_STEP_SUMMARY
        echo "- \`clicker-linux-x64-binary\` - Linux executable" >> $GITHUB_STEP_SUMMARY
        echo "- \`clicker-macos-x64-binary\` - macOS Intel executable" >> $GITHUB_STEP_SUMMARY
        echo "- \`clicker-macos-arm64-binary\` - macOS Apple Silicon executable" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### macOS App Bundles (Professional DMG)" >> $GITHUB_STEP_SUMMARY
        echo "- \`clicker-macos-x64-app-bundle\` - macOS Intel .dmg installer" >> $GITHUB_STEP_SUMMARY
        echo "- \`clicker-macos-arm64-app-bundle\` - macOS Apple Silicon .dmg installer" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Built from commit: \`${{ github.sha }}\`*" >> $GITHUB_STEP_SUMMARY
