name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            extension: .exe
            artifact_name: clicker-windows-x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            extension: ""
            artifact_name: clicker-linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            extension: ""
            artifact_name: clicker-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            extension: ""
            artifact_name: clicker-macos-arm64

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxext-dev libxi-dev libxtst-dev

    - name: Install cargo-bundle (macOS only)
      if: matrix.os == 'macos-latest'
      run: cargo install cargo-bundle

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create macOS app bundle
      if: matrix.os == 'macos-latest'
      run: |
        cargo bundle --release --target ${{ matrix.target }}

        if [ "${{ matrix.target }}" = "x86_64-apple-darwin" ]; then
          cd target/${{ matrix.target }}/release/bundle/osx/
          tar -czf ../../../../../clicker-macos-x64-bundle.tar.gz Clicker.app/
        else
          cd target/${{ matrix.target }}/release/bundle/osx/
          tar -czf ../../../../../clicker-macos-arm64-bundle.tar.gz Clicker.app/
        fi

    - name: Prepare artifacts (Windows/Linux)
      if: matrix.os != 'macos-latest'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/clicker${{ matrix.extension }} artifacts/clicker${{ matrix.extension }}

    - name: Prepare artifacts (macOS binary)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/clicker artifacts/clicker

    - name: Upload binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-binary
        path: artifacts/
        retention-days: 30

    - name: Upload macOS app bundle
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-app-bundle
        path: clicker-${{ matrix.artifact_name }}-bundle.tar.gz
        retention-days: 30

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxext-dev libxi-dev libxtst-dev

    - name: Run tests
      run: cargo test --verbose

    # - name: Run clippy
      # run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check

  create-release-summary:
    name: Create Build Summary
    runs-on: ubuntu-latest
    needs: [build, test]
    if: always()
    steps:
    - name: Create build summary
      run: |
        echo "# Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Build Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Builds**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Available Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "The following build artifacts are available:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Binaries" >> $GITHUB_STEP_SUMMARY
        echo "- \`clicker-windows-x64-binary\` - Windows executable" >> $GITHUB_STEP_SUMMARY
        echo "- \`clicker-linux-x64-binary\` - Linux executable" >> $GITHUB_STEP_SUMMARY
        echo "- \`clicker-macos-x64-binary\` - macOS Intel executable" >> $GITHUB_STEP_SUMMARY
        echo "- \`clicker-macos-arm64-binary\` - macOS Apple Silicon executable" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### macOS App Bundles" >> $GITHUB_STEP_SUMMARY
        echo "- \`clicker-macos-x64-app-bundle\` - macOS Intel .app bundle" >> $GITHUB_STEP_SUMMARY
        echo "- \`clicker-macos-arm64-app-bundle\` - macOS Apple Silicon .app bundle" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Built from commit: \`${{ github.sha }}\`*" >> $GITHUB_STEP_SUMMARY
